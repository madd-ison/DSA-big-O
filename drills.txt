1. What is the Big O?
  1) Determine the Big O for the following algorithm: You are sitting in a room with 15 people. 
    You want to find a playmate for your dog, preferably of the same breed. So you want to know if anyone 
    out of the 15 people have the same breed as your dog. You stand up and yell out, who here has a golden 
    retriever and would like to be a playdate for my golden. Someone yells - "I do, be happy to bring him over"
    --> O(1) because you get the response you're looking for in the same amount of time no matter how many people 
      are in the room. (selecting one item from the array)

  2) Determine the Big O for the following algorithm: You are sitting in a room with 15 people. You want to find a 
  playmate for your dog who is of the same breed. So you want to know if anyone out of the 15 people have the same 
  breed as your dog. You start with the first person and ask him if he has a golden retriever. He says no, then you ask 
  the next person, and the next, and the next until you find someone who has a golden or there is no one else to ask.
   --> O(n) because the amount of time it takes you to ask everybody in the room depends on how 
      many people are in the room. (looping through the array)
  
  
2. Even or Odd

  What is the Big O of the following algorithm? Explain your answer

  function isEven(value) {
    if (value % 2 === 0) {
        return true;
    }
    else
        return false;
    }
  }
  --> O(1) because you are only performing one task, no matter how large the value is


3. Are You Here?
  - What is the Big O of the following algorithm? Explain your answer

  function areYouHere(arr1, arr2) {
    for (let i = 0; i < arr1.length; i++) {
        const el1 = arr1[i];
        for (let j = 0; j < arr2.length; j++) {
            const el2 = arr2[j];
            if (el1 === el2) return true;
        }
    }
    return false;
  }
  --> O(n^2) because it requires two levels of looping


4. Doubler
  What is the Big O of the following algorithm? Explain your answer

  function doubleArrayValues(array) {
    for (let i = 0; i < array.length; i++) {
        array[i] *= 2;
    }
    return array;
  }
  --> O(n) depends on the length of the array


5. Naive Search
  What is the Big O of the following algorithm? Explain your answer

  function naiveSearch(array, item) {
    for (let i = 0; i < array.length; i++) {
        if (array[i] === item) {
            return i;
        }
    }
  }
  --> O(n) linear, execution time again depends on the length of the array


6. Creating Pairs
  What is the Big O of the following algorithm? Explain your answer

  function createPairs(arr) {
    for (let i = 0; i < arr.length; i++) {
        for(let j = i + 1; j < arr.length; j++) {
            console.log(arr[i] + ", " +  arr[j] );
        }
    }
  }
  --> O(n^2) performs nested ops, 2 levels of looping

7. What does the following algorithm do? What is its runtime complexity? Explain your answer

  function compute(num) {
    let result = [];
    for (let i = 1; i <= num; i++) {

        if (i === 1) {
            result.push(0);
        }
        else if (i === 2) {
            result.push(1);
        }
        else {
            result.push(result[i - 2] + result[i - 3]);
        }
    }
    return result;
  }
  --> O(n) amount of times it performs loops depends on num, for ex. if num = 10 runtime will be 2 sec, if num = 100, 4 sec, etc.
  --> prints {num} amount of numbers in fibonacci sequence and pushes them into result array

8. In this example, we return to the problem of searching using a more sophisticated approach than in naive search, above. Assume that the 
  input array is always sorted. What is the Big O of the following algorithm? Explain your answer

  function efficientSearch(array, item) {
    let minIndex = 0;
    let maxIndex = array.length - 1;
    let currentIndex;
    let currentElement;

    while (minIndex <= maxIndex) {
        currentIndex = Math.floor((minIndex + maxIndex) / 2);
        currentElement = array[currentIndex];

        if (currentElement < item) {
            minIndex = currentIndex + 1;
        }
        else if (currentElement > item) {
            maxIndex = currentIndex - 1;
        }
        else {
            return currentIndex;
        }
    }
    return -1;
  }
  --> O(log(n)) - each loop cuts the problem in half, therefore runtime increases slowly


9. Random Element
  What is the Big O of the following algorithm? Explain your answer

  function findRandomElement(arr) {
    return arr[Math.floor(Math.random() * arr.length)];
  }
  --> O(1) just returns one time, one value
  

10. What Am I?
  What does the following algorithm do? What is the Big O of the following algorithm? Explain your answer

  function isWhat(n) {
    if (n < 2 || n % 1 !== 0) {
        return false;
    }
    for (let i = 2; i < n; ++i) {
        if (n % i === 0) return false;
    }
    return true;
  }
  --> O(n) checks to see if a number is not a prime number, 

11. Tower of Hanoi
    There are three rods and a number of disks of different sizes which can slide onto any rod. The puzzle starts with the disks neatly 
    stacked in ascending order of size on one rod, the smallest disk at the top (making a conical shape). The other two rods are empty to begin with.
    The goal of the puzzle is to move the entire stack of rods to another rod (can't be the original rod where it was stacked before) where it will 
    be stacked in the ascending order as well. This should be done obeying the following rules: i) Only one disk may be moved at a time ii) 
    Each move consists of taking the upper disk from one of the rods and sliding it onto another rod, on top of the other disks that may already 
    be present on that rod. iii) A larger disk may not placed on top of a smaller disk
   
    Derive an algorithm to solve the Tower of Hanoi puzzle.
    Implement your algorithm using recursion. Your program should display each movement of the disk from one rod to another.
    If you are given 5 disks, how do the rods look like after 7 recursive calls?
    How many moves are needed to complete the puzzle with 3 disks? with 4 disks? with 5 disks?
    What is the runtime of your algorithm?
    
    --> If the disk you're moving is the smallest,
      then move it from the start post to the destination post.
      
      Otherwise, start again at the top of this code with a new set of inputs:
      Use one less disk.
      Use the same start post.
      Use the staging post as the destination post.
      Move the largest disk from the start post to the destination post.
    
      Start again at the top of this code with a new set of inputs:
      Use one fewer disk.
      Use the staging post as the start post.
      Use the same destination post.
      
    --> function solve_tower_of_hanoi(disk, start, destination, staging) {
              if (disk == 1) {
                // base case 
                document.write("Move disk 1 from post " + start + " to post " + destination +
                  ".<br/>");

              } else {
                // first solve for all except the last disk
                solve_tower_of_hanoi(disk - 1, start, staging, destination);

                // now move the last disk
                document.write("Move disk " + disk  + " from post " + start + " to post " +
                  destination + ".<br/>");

                // now solve for the remaining disks
                solve_tower_of_hanoi(disk - 1, staging, destination, start);
              }
            }
